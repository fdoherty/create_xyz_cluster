"""
Unit and regression test for create_xyz_cluster.py
"""
import errno
import os
import sys
import unittest
from contextlib import contextmanager
from io import StringIO
import numpy as np
import logging
from create_xyz_cluster.create_xyz_cluster import main, minima_stats

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
DISABLE_REMOVE = logger.isEnabledFor(logging.DEBUG)

CURRENT_DIR = os.path.dirname(__file__)
MAIN_DIR = os.path.join(CURRENT_DIR, '..')
TEST_DATA_DIR = os.path.join(CURRENT_DIR, 'test_data')
PROJ_DIR = os.path.join(MAIN_DIR, 'create_xyz_cluster')
DATA_DIR = os.path.join(PROJ_DIR, 'data')
SAMPLE_DATA_FILE_LOC = os.path.join(DATA_DIR, 'minima.xyz')

# Assumes running tests from the main directory
DEF_TXT_OUT = os.path.join(MAIN_DIR, 'coords.txt')


def silent_remove(filename, disable=False):
    """
    Removes the target file name, catching and ignoring errors that indicate that the
    file does not exist.
    @param filename: The file to remove.
    @param disable: boolean to flag if want to disable removal
    """
    if not disable:
        try:
            os.remove(filename)
        except OSError as e:
            if e.errno != errno.ENOENT:
                raise


class TestMain(unittest.TestCase):
    # These tests make sure that the program can run properly from main
    def testSampleOutput(self):
        # Checks that runs with defaults and that files are created
        test_input = ["-m", SAMPLE_DATA_FILE_LOC]
        try:
            if logger.isEnabledFor(logging.DEBUG):
                main(test_input)
            self.assertTrue(os.path.isfile("coords.txt"))
        finally:
            silent_remove(DEF_TXT_OUT, disable=DISABLE_REMOVE)


class TestMainFailWell(unittest.TestCase):
    def testMissingFile(self):
        test_input = ["-m", "ghost.txt"]
        if logger.isEnabledFor(logging.DEBUG):
            main(test_input)
        with capture_stderr(main, test_input) as output:
            self.assertTrue("ghost.txt" in output)


class TestMinimaStats(unittest.TestCase):
    def testSampleData(self):
        # Tests that the outputs generated by minima_stats function match the saved expected results
        with open(SAMPLE_DATA_FILE_LOC, "r") as f:
            minima_data = f.read().splitlines()
        minima_data = [i.split() for i in minima_data]
        npsize, output, position = minima_stats(minima_data)
        size = np.array([float(npsize), 0., 0.])
        out = np.array(output)
        pos = np.array(position)
        analysis_results = np.vstack((size, out, pos))
        expected_results = np.loadtxt(fname=os.path.join(TEST_DATA_DIR, "sample_data_results.csv"), delimiter=',')
        self.assertTrue(np.allclose(expected_results, analysis_results))
        

# Utility functions

# From http://schinckel.net/2013/04/15/capture-and-test-sys.stdout-sys.stderr-in-unittest.testcase/
@contextmanager
def capture_stdout(command, *args, **kwargs):
    # pycharm doesn't know six very well, so ignore the false warning
    # noinspection PyCallingNonCallable
    out, sys.stdout = sys.stdout, StringIO()
    command(*args, **kwargs)
    sys.stdout.seek(0)
    yield sys.stdout.read()
    sys.stdout = out


@contextmanager
def capture_stderr(command, *args, **kwargs):
    # pycharm doesn't know six very well, so ignore the false warning
    # noinspection PyCallingNonCallable
    err, sys.stderr = sys.stderr, StringIO()
    command(*args, **kwargs)
    sys.stderr.seek(0)
    yield sys.stderr.read()
    sys.stderr = err
